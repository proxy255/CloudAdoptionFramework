@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using Microsoft.AspNetCore.Html
@inject IJSRuntime JsRuntime
@inject IToastService toastService
@inject ILogger<EditModal> Logger
@inject StateContainer state

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content @theme.ThemeStyle">
            <div class="modal-header bg-navcolor text-white">
                <h3 class="modal-title">@title</h3>
            </div>
            <div class="modal-body">
                <p>
                    @((MarkupString)message)
                </p>

                <div class="card @theme.ThemeStyle mb-3">
                    <div class="card-header bg-default text-black fw-bold">
                        Name
                    </div>
                    <div class="card card-body @theme.ThemeStyle">
                        @if (protectedName)
                        {
                            <input title="Name" value="@itemName" disabled type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                        }
                        else
                        {
                            <input title="Name" value="@itemName" type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                        }
                    </div>
                </div>
                @if (type != "ResourceComponent")
                {
                    <div class="card @theme.ThemeStyle mb-3">
                        <div class="card-header bg-default text-black fw-bold">
                            Short Name
                        </div>
                        <div class="card card-body @theme.ThemeStyle">
                            <input title="Short Name" value="@itemShortName" type="text" class="form-control @theme.ThemeStyle" id="shortname" @onchange="@((ui) => { itemShortName = (string)ui.Value;})" />
                        </div>
                    </div>
                }
                @if ((type == "ResourceType") && (resourceComponents != null))
                {
                    @if (bool.Parse(ConfigurationHelper.GetAppSetting("DevMode")))
                    {
                        <div class="card @theme.ThemeStyle mb-3">
                            <div class="card-header bg-default text-black fw-bold">
                                RegEx
                            </div>
                            <div class="card card-body @theme.ThemeStyle">
                                <input title="RegEx" value="@itemRegEx" type="text" class="form-control @theme.ThemeStyle" id="shortname" @onchange="@((ui) => { itemRegEx = (string)ui.Value;})" />
                            </div>
                        </div>
                    }
                    <div id="optional" class="card mt-3">
                        <div class="card-header bg-default text-black fw-bold">
                            <a id="OptionalComponents" class="link-dark text-decoration-none" data-toggle="collapse" href="#optionalcomponents" role="button" aria-expanded="false" aria-controls="optionalcomponents">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Optional Components
                            </a>
                        </div>
                        <div class="collapse card card-body @theme.ThemeStyle" id="optionalcomponents">
                            @foreach (ResourceComponent resourceComponent in resourceComponents)
                            {
                                if (resourceComponent.Name != "ResourceType")
                                {
                                    <div class="form-check">
                                        @if (optional.ToLower().Contains(GeneralHelper.NormalizeName(resourceComponent.Name, true)))
                                        {
                                            <input title="Optional Component" class="form-check-input" type="checkbox" value="" id="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)" checked>
                                            <label class="form-check-label" for="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                        else
                                        {
                                            <input title="Optional Component" class="form-check-input" type="checkbox" value="" id="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                            <label class="form-check-label" for="optional-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                                @resourceComponent.DisplayName
                                            </label>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <div id="excluded" class="card mt-3">
                        <div class="card-header bg-default text-black fw-bold">
                            <a id="ExcludedComponents" class="link-dark text-decoration-none" data-toggle="collapse" href="#excludedcomponents" role="button" aria-expanded="false" aria-controls="excludedcomponents">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Excluded Components
                            </a>
                        </div>
                        <div class="collapse card card-body @theme.ThemeStyle" id="excludedcomponents">
                            @foreach (ResourceComponent resourceComponent in resourceComponents)
                            {
                                //@if (resourceComponent.Name != "ResourceType")
                                //{
                                <div class="form-check">
                                    @if (exclude.ToLower().Contains(GeneralHelper.NormalizeName(resourceComponent.Name, true)))
                                    {
                                        <input title="Excluded Component" class="form-check-input" type="checkbox" id="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)" checked>
                                        <label class="form-check-label" for="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                            @resourceComponent.DisplayName
                                        </label>
                                    }
                                    else
                                    {
                                        <input title="Excluded Component" class="form-check-input" type="checkbox" id="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                        <label class="form-check-label" for="exclude-@GeneralHelper.NormalizeName(resourceComponent.Name, true)">
                                            @resourceComponent.DisplayName
                                        </label>
                                    }
                                </div>
                                //}
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button title="Save" @onclick="Save" class="btn btn-success">Update</button>
                <button title="Cancel" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public ThemeInfo theme { get; set; }

    [Parameter] public int id { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public string message { get; set; }
    [Parameter] public string type { get; set; }
    [Parameter] public bool protectedName { get; set; }


    private ServiceResponse serviceResponse = new();
    private string? itemName;
    private string? itemShortName;
    private string? itemRegEx;
    private List<ResourceComponent> resourceComponents;
    private string? optional;
    private string? exclude;
    private bool ischecked = false;

    protected override async void OnInitialized()
    {
        switch (type)
        {
            case "ResourceComponent":
                serviceResponse = await ResourceComponentService.GetItem(id);
                ResourceComponent resourceComponent = (ResourceComponent)serviceResponse.ResponseObject;
                itemName = resourceComponent.Name;
                break;
            case "ResourceEnvironment":
                serviceResponse = await ResourceEnvironmentService.GetItem(id);
                ResourceEnvironment resourceEnvironment = (ResourceEnvironment)serviceResponse.ResponseObject;
                itemName = resourceEnvironment.Name;
                itemShortName = resourceEnvironment.ShortName;
                break;
            case "ResourceLocation":
                serviceResponse = await ResourceLocationService.GetItem(id);
                ResourceLocation resourceLocation = (ResourceLocation)serviceResponse.ResponseObject;
                itemName = resourceLocation.Name;
                itemShortName = resourceLocation.ShortName;
                break;
            case "ResourceOrg":
                serviceResponse = await ResourceOrgService.GetItem(id);
                ResourceOrg resourceOrg = (ResourceOrg)serviceResponse.ResponseObject;
                itemName = resourceOrg.Name;
                itemShortName = resourceOrg.ShortName;
                break;
            case "ResourceProjAppSvc":
                serviceResponse = await ResourceProjAppSvcService.GetItem(id);
                ResourceProjAppSvc resourceProjAppSvc = (ResourceProjAppSvc)serviceResponse.ResponseObject;
                itemName = resourceProjAppSvc.Name;
                itemShortName = resourceProjAppSvc.ShortName;
                break;
            case "ResourceType":
                serviceResponse = await ResourceTypeService.GetItem(id);
                ResourceType resourceType = (ResourceType)serviceResponse.ResponseObject;
                itemName = resourceType.Resource;
                itemShortName = resourceType.ShortName;
                optional = resourceType.Optional;
                exclude = resourceType.Exclude;
                itemRegEx = resourceType.Regx;
                serviceResponse = await ResourceComponentService.GetItems(true);
                resourceComponents = (List<ResourceComponent>)serviceResponse.ResponseObject;
                resourceComponents = resourceComponents.OrderBy(x => x.Name).ToList();
                break;
            case "ResourceUnitDept":
                serviceResponse = await ResourceUnitDeptService.GetItem(id);
                ResourceUnitDept resourceUnitDept = (ResourceUnitDept)serviceResponse.ResponseObject;
                itemName = resourceUnitDept.Name;
                itemShortName = resourceUnitDept.ShortName;
                break;
            case "ResourceFunction":
                serviceResponse = await ResourceFunctionService.GetItem(id);
                ResourceFunction resourceFunction = (ResourceFunction)serviceResponse.ResponseObject;
                itemName = resourceFunction.Name;
                itemShortName = resourceFunction.ShortName;
                break;
            case "CustomComponent":
                serviceResponse = await CustomComponentService.GetItem(id);
                CustomComponent customComponent = (CustomComponent)serviceResponse.ResponseObject;
                itemName = customComponent.Name;
                itemShortName = customComponent.ShortName;
                break;
        }
    }

    async void Save()
    {
        try
        {
            bool valid = false;
            if (type == "ResourceComponent")
            {
                if (itemName != null)
                {
                    if (itemName != "")
                    {
                        valid = true;
                        serviceResponse = await ResourceComponentService.GetItem(id);
                        ResourceComponent resourceComponent = (ResourceComponent)serviceResponse.ResponseObject;

                        // Update any references in the custom components configuration to be the new custom component type name
                        serviceResponse = await CustomComponentService.GetItemsByParentType(GeneralHelper.NormalizeName(resourceComponent.Name, true));
                        var customcomponents = (List<CustomComponent>)serviceResponse.ResponseObject;
                        foreach (var customcomponent in customcomponents)
                        {
                            customcomponent.ParentComponent = GeneralHelper.NormalizeName(itemName, true);
                            serviceResponse = await CustomComponentService.PostItem(customcomponent);
                        }

                        resourceComponent.Name = itemName;
                        resourceComponent.DisplayName = itemName;
                        serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                    }
                    else
                    {
                        toastService.ShowError("You must enter a name!", "ERROR");
                    }
                }
                else
                {
                    toastService.ShowError("You must enter a name!", "ERROR");
                }
            }
            else
            {
                if ((itemName != "") && (itemShortName != ""))
                {
                    if (ValidationHelper.ValidateShortName(itemShortName, type))
                    {
                        valid = true;
                        switch (type)
                        {
                            case "ResourceEnvironment":
                                serviceResponse = await ResourceEnvironmentService.GetItem(id);
                                ResourceEnvironment resourceEnvironment = (ResourceEnvironment)serviceResponse.ResponseObject;
                                resourceEnvironment.Name = itemName;
                                resourceEnvironment.ShortName = itemShortName;
                                serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                                break;
                            case "ResourceLocation":
                                serviceResponse = await ResourceLocationService.GetItem(id);
                                ResourceLocation resourceLocation = (ResourceLocation)serviceResponse.ResponseObject;
                                resourceLocation.ShortName = itemShortName;
                                serviceResponse = await ResourceLocationService.PostItem(resourceLocation);
                                break;
                            case "ResourceOrg":
                                serviceResponse = await ResourceOrgService.GetItem(id);
                                ResourceOrg resourceOrg = (ResourceOrg)serviceResponse.ResponseObject;
                                resourceOrg.Name = itemName;
                                resourceOrg.ShortName = itemShortName;
                                serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                                break;
                            case "ResourceProjAppSvc":
                                serviceResponse = await ResourceProjAppSvcService.GetItem(id);
                                ResourceProjAppSvc resourceProjAppSvc = (ResourceProjAppSvc)serviceResponse.ResponseObject;
                                resourceProjAppSvc.Name = itemName;
                                resourceProjAppSvc.ShortName = itemShortName;
                                serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                                break;
                            case "ResourceType":
                                serviceResponse = await ResourceTypeService.GetItem(id);
                                ResourceType resourceType = (ResourceType)serviceResponse.ResponseObject;
                                resourceType.ShortName = itemShortName;
                                resourceType.Optional = "";
                                resourceType.Exclude = "";
                                if (bool.Parse(ConfigurationHelper.GetAppSetting("DevMode")))
                                {
                                    resourceType.Regx = itemRegEx;
                                }

                                // Update the Optional and Exclude components
                                foreach (ResourceComponent resourceComponent in resourceComponents)
                                {
                                    if (resourceComponent.Name != "ResourceType")
                                    {
                                        // Optional
                                        ischecked = false;
                                        ischecked = await JsRuntime.InvokeAsync<bool>("IsElementChecked", "optional-" + GeneralHelper.NormalizeName(resourceComponent.Name, true));
                                        if (ischecked)
                                        {
                                            if (resourceType.Optional != "")
                                            {
                                                resourceType.Optional += ",";
                                            }
                                            resourceType.Optional += GeneralHelper.NormalizeName(resourceComponent.Name, false);
                                        }
                                    }

                                    // Exclude
                                    ischecked = false;
                                    ischecked = await JsRuntime.InvokeAsync<bool>("IsElementChecked", "exclude-" + GeneralHelper.NormalizeName(resourceComponent.Name, true));
                                    if (ischecked)
                                    {
                                        if (resourceType.Exclude != "")
                                        {
                                            resourceType.Exclude += ",";
                                        }
                                        resourceType.Exclude += GeneralHelper.NormalizeName(resourceComponent.Name, false);
                                    }
                                }
                                serviceResponse = await ResourceTypeService.PostItem(resourceType);
                                break;
                            case "ResourceUnitDept":
                                serviceResponse = await ResourceUnitDeptService.GetItem(id);
                                ResourceUnitDept resourceUnitDept = (ResourceUnitDept)serviceResponse.ResponseObject;
                                resourceUnitDept.Name = itemName;
                                resourceUnitDept.ShortName = itemShortName;
                                serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                                break;
                            case "ResourceFunction":
                                serviceResponse = await ResourceFunctionService.GetItem(id);
                                ResourceFunction resourceFunction = (ResourceFunction)serviceResponse.ResponseObject;
                                resourceFunction.Name = itemName;
                                resourceFunction.ShortName = itemShortName;
                                serviceResponse = await ResourceFunctionService.PostItem(resourceFunction);
                                break;
                            case "CustomComponent":
                                serviceResponse = await CustomComponentService.GetItem(id);
                                CustomComponent customComponent = (CustomComponent)serviceResponse.ResponseObject;
                                customComponent.Name = itemName;
                                customComponent.ShortName = itemShortName;
                                serviceResponse = await CustomComponentService.PostItem(customComponent);
                                break;
                        }
                    }
                    else
                    {
                        toastService.ShowError("You must enter a valid short name!", "ERROR");
                    }
                }
                else
                {
                    toastService.ShowError("You must enter a name and short name!", "ERROR");
                }
            }

            if (valid)
            {
                if (serviceResponse.Success)
                {
                    ModalInstance.CloseAsync();
                    toastService.ShowSuccess(GeneralHelper.NormalizeName(type, false) + " updated!", "SUCCESS");
                    AdminLogService.PostItem(new AdminLogMessage() { Title = "SUCCESS", Message = GeneralHelper.NormalizeName(type, false) + " updated!" });
                }
                else
                {
                    toastService.ShowError("There was an error updating the " + GeneralHelper.NormalizeName(type, false) + "! " + serviceResponse.ResponseObject, "ERROR");
                }
            }
        }
        catch (Exception ex)
        {
            AdminLogService.PostItem(new AdminLogMessage() { Title = "ERROR", Message = ex.Message });
            toastService.ShowError("There was an error updating the " + GeneralHelper.NormalizeName(type, false) + "! " + ex.Message, "ERROR");
        }
    }

    async Task Cancel() => await ModalInstance.CancelAsync();
}